1. volatile关键字的作用
   1.1 编译器优化介绍：
   硬件上的优化：由于内存访问速度远不如cpu的速度。为了提高机器的整体性能，在硬件上引入硬件高速缓存cache，加速对内存的访问。现在cpu中指令的执行未必是顺序执行，
   没有相关性的指令可以乱序执行，以充分利用cpu的流水线，提高执行速度。
   软件上的优化：一种是在编写代码时由程序员优化，另外一种是由编译器优化。
   编译器的优化：将内存变量缓存到寄存器，调整指令执行顺序充分利用cpu指令流水线，常见的是重新排序读写指令。
   
   1.2 volatile的本意是“易变的”，因为访问寄存器要比访问内存单元快要快的多，所以编译器一般都会做减少存取内存的优化，有可能会导致脏数据的读取。当使用volatile
   声明变量时，编译器总是重新去内存单元重新读区数据。编译器遇到volatile就不再优化代码。
 
2. 内核空间和用户空间通信方式  进程间通信
   2.1 select,poll
   2.2 信号量，消息队列，管道
   
3. 多线程
   3.1 pthread_join/pthread_detach的用处
4. 多线程和工作队列的关系
5. 中断上下文和进程上下文
6. 硬时钟和软时钟
7. isp算法和效果调优
8. v4l2框架

9. 代码的启动地址
10. TI软件发布工具  yocto嵌入式软件管理工具
11. 变量的存储位置
12. 网络驱动/网络协议
13. uboot的启动流程
14. ffmpeg
